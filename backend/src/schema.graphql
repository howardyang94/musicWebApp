type Query {
    feed(filter: String, title: String, artist: String, tags: String, match: String, description: String skip: Int, take: Int, id: Int, orderBy: LinkOrderByInput): Feed!
    findLinkId(id: ID!): Link  # select by link id orderBy: LinkOrderByInput
}
type Mutation {
    post(title:String!, artist:String!, url:String, description:String, tags:String): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    edit(id:ID!, title:String, artist:String, url:String, description:String, tags:String): Link!
    remove(id:ID!): Link!
}

enum Sort {
    asc
    desc
}
input LinkOrderByInput {
    title: Sort
    artist: Sort
    url: Sort
    createdAt: Sort
    id: Sort
}
type Link {
    id: ID!
    createdAt: String!   
    lastEdited: String
    title: String!
    artist: String!
    tags: String
    description: String
    url: String
    postedBy: User
}

type Feed {
    links: [Link!]!
    count: Int!
}
type Subscription {
  newLink: Link
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}